.data
N: .word 10
Seed: .word 0x10000000
Array: .word 0x10001000
SortedArray: .word 0x10002000
Left: .word 0x10003000
Right: .word 0x10004000


.text
lw x8 Array
lw x9 SortedArray
lw x3 N
lw x4 Seed
lw s2 Left
lw s3 Right


jal x0, main	        #jump to main function


#random function
#temp -> x10,x11,x6
random:
    add x10, x4, x0
    slli x11,x10, 21
    xor x10, x10, x11
    addi x6, x0, 35
    srl x11, x10, x6
    xor x10, x10, x11
    slli x11, x10, 4
    xor x10, x10, x11
    add x4, x10, x0			        #generates random number in x4
    jalr x0, x1, 0					#jump to space


#mergesort function
#temp -> a0,a1,t0
MergeSort:
    addi sp, sp, -16                #storing in stack
    sw x1, 0(sp)
    sw a0, 4(sp)                    #a0 -> l
    sw a1, 8(sp)                    #a1 -> r

    bge a0, a1, MergeSort_End       #end the function if l>=r

    sub t0, a1, a0                  #calculating m
    srli t0, t0, 1
    add a1, a0, t0
    sw a1, 12(sp)

    jal x1, MergeSort               #recursion for left subarray

    lw a0, 12(sp)
    addi a0, a0, 1
    lw a1, 8(sp)

    jal x1, MergeSort               #recursion for right subarray

    lw a0, 4(sp)                    #a0 -> l
    lw a1, 12(sp)                   #a1 -> m
    lw a2, 8(sp)                    #a2 -> r

    jal x1, Merge                   #jump to merge function

MergeSort_End:                  #ending merge sort function
    lw x1, 0(sp)
    addi sp, sp, 16
    jalr x0, x1 ,0


#merge function
#temp -> t0,t1,t2,t3,t4,t5,t6
#t1->i  t2->j  t3->k
#t4->n1  t5->n2
Merge:
    add t1, x0, x0
    add t2, x0, x0
    add t3, x0, x0

    sub t4, a1, a0              #calculating n1,n2
    addi t4, t4, 1
    sub t5, a2, a1

    lw s2, Left
    lw s3,Right

    add t6, a0, x0              #accessing add of SortedArray[l]
    slli t6, t6, 2
    lw x9, SortedArray
    add t6, x9, t6

L:                          #for loop for left array
    bge t1, t4, End_L
    lw t0, 0(t6)
    sw t0, 0(s2)
    addi t1, t1, 1
    addi t6, t6, 4
    addi s2, s2, 4
    jal x0, L
End_L:
    add t6, x0, x0
    lw s2, Left
    add t1, x0, x0

    addi t6, a1, 1              #accessing add of SortedArray[m+1]
    slli t6, t6, 2
    lw x9, SortedArray
    add t6, x9, t6

R:                          #for loop for right array
    bge t2, t5, End_R
    lw t0, 0(t6)
    sw t0, 0(s3)
    addi t2, t2, 1
    addi t6, t6, 4
    addi s3, s3, 4
    jal x0, R
End_R:
    add t6, x0, x0
    lw s3, Right
    add t2, x0, x0

    add t3, a0, x0

WhileLoop:                              #while loop(i<n1 && j<n2)
    bge t1, t4, WhileLoop_End
    bge t2, t5, WhileLoop_End

    lw a5, 0(s2)
    lw a6, 0(s3)

    add a7, t3, x0                          #accessing add of SortedArray[k]
    slli a7, a7, 2
    lw x9, SortedArray
    add a7, a7, x9

if:                                     #if condition
    bgt a5, a6, else
    sw a5, 0(a7)
    addi t1, t1, 1
    addi s2, s2, 4
    addi t3, t3, 1
    jal x0, WhileLoop

else:                                   #else condition
    sw a6, 0(a7)
    addi t2, t2, 1
    addi s3, s3, 4
    addi t3, t3, 1
    jal x0, WhileLoop

WhileLoop_End:

While1:                                 #while loop(i<n1)
    bge t1, t4, While1_End

    add a7, t3, x0                          #accessing add of SortedArray[k]
    slli a7, a7, 2
    lw x9, SortedArray
    add a7, a7, x9

    lw a5, 0(s2)
    sw a5, 0(a7)
    addi t1, t1, 1
    addi s2, s2, 4
    addi t3, t3, 1
    jal x0, While1

While1_End:

While2:                                 #while loop(j<n2)
    bge t2, t5, While2_End
    
    add a7, t3, x0                          #accessing add of SortedArray[k]
    slli a7, a7, 2
    lw x9, SortedArray
    add a7, a7, x9
    
    lw a6, 0(s3)
    sw a6, 0(a7)
    addi t2, t2, 1
    addi s3, s3, 4
    addi t3, t3, 1
    jal x0, While2

While2_End:
    jalr x0, x1, 0                      #jump back to mergesort function


#main function
#temp -> x5
main:
    andi x5, x5, 0
loop:
	bge x5, x3, Label		    #jump to MergeSort after insertions in arrays
	jal x1, random				#jump to random to generate random numbers

	sw x4, 0(x8)
	sw x4, 0(x9)
	addi x8, x8, 4
	addi x9, x9, 4
	addi x5, x5, 1
	jal x0, loop					#jump to loop

Label:
    add a0, x0, x0
    addi a1, x3, -1
    jal x1, MergeSort               #jump to mergesort
    beq x0, x0, output              #print output after sorting


#output
output:

lw x8, Array
lw x11, 0(x8)
lw x12, 4(x8)
lw x13, 8(x8)
lw x14, 12(x8)
lw x15, 16(x8)
lw x16, 20(x8)
lw x17, 24(x8)
lw x18, 28(x8)
lw x19, 32(x8)
lw x20, 36(x8)

lw x9 SortedArray
lw x21, 0(x9)
lw x22, 4(x9)
lw x23, 8(x9)
lw x24, 12(x9)
lw x25, 16(x9)
lw x26, 20(x9)
lw x27, 24(x9)
lw x28, 28(x9)
lw x29, 32(x9)
lw x30, 36(x9)

.exit: